--// Auto Skip Days + Teleport + Auto Buy Box Panel
--// by Vincenzo

--// Services
local Players = game:GetService("Players")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local UserInputService = game:GetService("UserInputService")

--// Variables
local AutoSkipDays = false
local AutoBuy = false
local Minimized = false
local LastPosition = nil
local SelectedBox = "Item Box"

local Player = Players.LocalPlayer
local Character = Player.Character or Player.CharacterAdded:Wait()

--// Functions
local function BuyBox(boxName)
	local args = { boxName }
	ReplicatedStorage:WaitForChild("Events"):WaitForChild("Shop"):WaitForChild("BuyBox"):InvokeServer(unpack(args))
end

--// GUI Setup
local ScreenGui = Instance.new("ScreenGui")
ScreenGui.Name = "ControlPanelUI"
ScreenGui.ResetOnSpawn = false
ScreenGui.Parent = game.CoreGui

local Frame = Instance.new("Frame")
Frame.Size = UDim2.new(0, 350, 0, 400)
Frame.Position = UDim2.new(0.5, -175, 0.5, -200)
Frame.BackgroundColor3 = Color3.fromRGB(25, 25, 25)
Frame.Parent = ScreenGui
Instance.new("UICorner", Frame).CornerRadius = UDim.new(0, 12)

-- Title Bar
local TitleBar = Instance.new("Frame")
TitleBar.Size = UDim2.new(1, 0, 0, 40)
TitleBar.BackgroundColor3 = Color3.fromRGB(35, 35, 35)
TitleBar.Parent = Frame
Instance.new("UICorner", TitleBar).CornerRadius = UDim.new(0, 12)

local TitleText = Instance.new("TextLabel")
TitleText.Size = UDim2.new(1, -80, 1, 0)
TitleText.Position = UDim2.new(0, 10, 0, 0)
TitleText.BackgroundTransparency = 1
TitleText.Text = "üóø GEREG"
TitleText.TextColor3 = Color3.fromRGB(255, 255, 255)
TitleText.Font = Enum.Font.GothamBold
TitleText.TextScaled = true
TitleText.Parent = TitleBar

-- Buttons: minimize + close
local MinimizeButton = Instance.new("TextButton")
MinimizeButton.Size = UDim2.new(0, 40, 1, 0)
MinimizeButton.Position = UDim2.new(1, -80, 0, 0)
MinimizeButton.BackgroundTransparency = 1
MinimizeButton.Text = "‚ûñ"
MinimizeButton.TextColor3 = Color3.fromRGB(255, 255, 150)
MinimizeButton.Font = Enum.Font.GothamBold
MinimizeButton.TextScaled = true
MinimizeButton.Parent = TitleBar

local CloseButton = Instance.new("TextButton")
CloseButton.Size = UDim2.new(0, 40, 1, 0)
CloseButton.Position = UDim2.new(1, -40, 0, 0)
CloseButton.BackgroundTransparency = 1
CloseButton.Text = "‚ùå"
CloseButton.TextColor3 = Color3.fromRGB(255, 100, 100)
CloseButton.Font = Enum.Font.GothamBold
CloseButton.TextScaled = true
CloseButton.Parent = TitleBar

-- Content
local Content = Instance.new("Frame")
Content.Size = UDim2.new(1, 0, 0, 360)
Content.Position = UDim2.new(0, 0, 0, 40)
Content.BackgroundTransparency = 1
Content.Parent = Frame

-- Helper
local function MakeButton(name, pos, color)
	local btn = Instance.new("TextButton")
	btn.Size = UDim2.new(0.8, 0, 0, 50)
	btn.Position = pos
	btn.BackgroundColor3 = color
	btn.Text = name
	btn.TextColor3 = Color3.fromRGB(255,255,255)
	btn.Font = Enum.Font.GothamBold
	btn.TextScaled = true
	btn.Parent = Content
	Instance.new("UICorner", btn).CornerRadius = UDim.new(0, 10)
	return btn
end

-- Buttons + Status
local ToggleSkip = MakeButton("üïì Auto Skip Days", UDim2.new(0.1,0,0.05,0), Color3.fromRGB(40,40,40))
local Status = Instance.new("TextLabel")
Status.Size = UDim2.new(1,0,0,40)
Status.Position = UDim2.new(0,0,0.22,0)
Status.BackgroundTransparency = 1
Status.Text = "Status: ‚ùå OFF"
Status.TextColor3 = Color3.fromRGB(255,80,80)
Status.Font = Enum.Font.GothamBold
Status.TextScaled = true
Status.Parent = Content

local TPOutside = MakeButton("üö™ Teleport Outside", UDim2.new(0.1,0,0.38,0), Color3.fromRGB(60,60,120))
local TPBack = MakeButton("‚Ü©Ô∏è Teleport Back", UDim2.new(0.1,0,0.52,0), Color3.fromRGB(120,60,60))

-- Dropdown Menu
local Dropdown = Instance.new("TextButton")
Dropdown.Size = UDim2.new(0.8, 0, 0, 50)
Dropdown.Position = UDim2.new(0.1, 0, 0.66, 0)
Dropdown.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
Dropdown.Text = "üéÅ Selected: " .. SelectedBox
Dropdown.TextColor3 = Color3.fromRGB(255,255,255)
Dropdown.Font = Enum.Font.GothamBold
Dropdown.TextScaled = true
Dropdown.Parent = Content
Instance.new("UICorner", Dropdown).CornerRadius = UDim.new(0, 10)

-- Dropdown Options
local DropdownFrame = Instance.new("Frame")
DropdownFrame.Size = UDim2.new(0.8, 0, 0, 250)
DropdownFrame.Position = UDim2.new(0.1, 0, 0.8, 0)
DropdownFrame.BackgroundColor3 = Color3.fromRGB(30,30,30)
DropdownFrame.Visible = false
DropdownFrame.Parent = Content
Instance.new("UICorner", DropdownFrame).CornerRadius = UDim.new(0, 10)

local options = {"Item Box", "Consumable Box", "Defense Box", "Weapon Box", "Bodyguard Box"}

for i, opt in ipairs(options) do
	local optBtn = Instance.new("TextButton")
	optBtn.Size = UDim2.new(1, 0, 0, 40)
	optBtn.Position = UDim2.new(0, 0, 0, (i-1)*45)
	optBtn.BackgroundColor3 = Color3.fromRGB(45,45,45)
	optBtn.Text = opt
	optBtn.TextColor3 = Color3.fromRGB(255,255,255)
	optBtn.Font = Enum.Font.GothamBold
	optBtn.TextScaled = true
	optBtn.Parent = DropdownFrame
	optBtn.MouseButton1Click:Connect(function()
		SelectedBox = opt
		Dropdown.Text = "üéÅ Selected: " .. opt
		DropdownFrame.Visible = false
	end)
end

Dropdown.MouseButton1Click:Connect(function()
	DropdownFrame.Visible = not DropdownFrame.Visible
end)

-- Toggle Auto Buy
local ToggleBuy = MakeButton("üí∞ Toggle Auto Buy", UDim2.new(0.1,0,0.93,0), Color3.fromRGB(40,40,40))

-- Logic
ToggleSkip.MouseButton1Click:Connect(function()
	AutoSkipDays = not AutoSkipDays
	if AutoSkipDays then
		Status.Text = "Status: ‚è≥ Skipping Days..."
		Status.TextColor3 = Color3.fromRGB(255,255,120)
		ToggleSkip.BackgroundColor3 = Color3.fromRGB(0,170,0)
		task.spawn(function()
			while AutoSkipDays do
				ReplicatedStorage.Events.GameSystem.VoteSkipDay:FireServer()
				task.wait(0.2)
			end
		end)
	else
		Status.Text = "Status: ‚ùå OFF"
		Status.TextColor3 = Color3.fromRGB(255,80,80)
		ToggleSkip.BackgroundColor3 = Color3.fromRGB(40,40,40)
	end
end)

TPOutside.MouseButton1Click:Connect(function()
	Character = Player.Character or Player.CharacterAdded:Wait()
	if Character and Character:FindFirstChild("HumanoidRootPart") then
		LastPosition = Character.HumanoidRootPart.Position
		Character.HumanoidRootPart.CFrame = CFrame.new(-27.2629, 3.39505, -252.3832)
		Status.Text = "Status: üåç Teleported Outside"
	end
end)

TPBack.MouseButton1Click:Connect(function()
	Character = Player.Character or Player.CharacterAdded:Wait()
	if LastPosition and Character:FindFirstChild("HumanoidRootPart") then
		Character.HumanoidRootPart.CFrame = CFrame.new(LastPosition)
		Status.Text = "Status: ‚Ü©Ô∏è Returned Back"
	else
		Status.Text = "Status: ‚ö†Ô∏è No Saved Position"
	end
end)

ToggleBuy.MouseButton1Click:Connect(function()
	AutoBuy = not AutoBuy
	if AutoBuy then
		ToggleBuy.BackgroundColor3 = Color3.fromRGB(0,170,0)
		task.spawn(function()
			while AutoBuy do
				BuyBox(SelectedBox)
				Status.Text = "Status: üí∏ Buying " .. SelectedBox
				task.wait(0.3)
			end
		end)
	else
		ToggleBuy.BackgroundColor3 = Color3.fromRGB(40,40,40)
		Status.Text = "Status: ‚ùå OFF"
	end
end)

-- Minimize and Close
MinimizeButton.MouseButton1Click:Connect(function()
	Minimized = not Minimized
	if Minimized then
		Content.Visible = false
		Frame:TweenSize(UDim2.new(0,350,0,40), Enum.EasingDirection.Out, Enum.EasingStyle.Quad, 0.3, true)
		MinimizeButton.Text = "‚ûï"
	else
		Frame:TweenSize(UDim2.new(0,350,0,400), Enum.EasingDirection.Out, Enum.EasingStyle.Quad, 0.3, true)
		task.wait(0.3)
		Content.Visible = true
		MinimizeButton.Text = "‚ûñ"
	end
end)

CloseButton.MouseButton1Click:Connect(function()
	AutoSkipDays = false
	AutoBuy = false
	ScreenGui:Destroy()
end)

-- Dragging UI
local dragging, dragStart, startPos
local function update(input)
	local delta = input.Position - dragStart
	Frame.Position = UDim2.new(
		startPos.X.Scale,
		startPos.X.Offset + delta.X,
		startPos.Y.Scale,
		startPos.Y.Offset + delta.Y
	)
end
TitleBar.InputBegan:Connect(function(input)
	if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
		dragging = true
		dragStart = input.Position
		startPos = Frame.Position
		input.Changed:Connect(function()
			if input.UserInputState == Enum.UserInputState.End then
				dragging = false
			end
		end)
	end
end)
UserInputService.InputChanged:Connect(function(input)
	if dragging and (input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch) then
		update(input)
	end
end)
